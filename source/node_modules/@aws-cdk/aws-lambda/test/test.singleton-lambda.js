"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const lambda = require("../lib");
module.exports = {
    'can add same singleton Lambda multiple times, only instantiated once in template'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        for (let i = 0; i < 5; i++) {
            new lambda.SingletonFunction(stack, `Singleton${i}`, {
                uuid: '84c0de93-353f-4217-9b0b-45b6c993251a',
                code: new lambda.InlineCode('def hello(): pass'),
                runtime: lambda.Runtime.PYTHON_2_7,
                handler: 'index.hello',
                timeout: cdk.Duration.minutes(5),
            });
        }
        // THEN
        assert_1.expect(stack).to(assert_1.matchTemplate({
            Resources: {
                SingletonLambda84c0de93353f42179b0b45b6c993251aServiceRole26D59235: {
                    Type: 'AWS::IAM::Role',
                    Properties: {
                        AssumeRolePolicyDocument: {
                            Statement: [
                                {
                                    Action: 'sts:AssumeRole',
                                    Effect: 'Allow',
                                    Principal: { Service: 'lambda.amazonaws.com' },
                                },
                            ],
                            Version: '2012-10-17',
                        },
                        ManagedPolicyArns: [
                            {
                                'Fn::Join': ['', ['arn:', { Ref: 'AWS::Partition' }, ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']],
                            },
                        ],
                    },
                },
                SingletonLambda84c0de93353f42179b0b45b6c993251a840BCC38: {
                    Type: 'AWS::Lambda::Function',
                    Properties: {
                        Code: {
                            ZipFile: 'def hello(): pass',
                        },
                        Handler: 'index.hello',
                        Role: { 'Fn::GetAtt': ['SingletonLambda84c0de93353f42179b0b45b6c993251aServiceRole26D59235', 'Arn'] },
                        Runtime: 'python2.7',
                        Timeout: 300,
                    },
                    DependsOn: ['SingletonLambda84c0de93353f42179b0b45b6c993251aServiceRole26D59235'],
                },
            },
        }));
        test.done();
    },
    'dependencies are correctly added'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const singleton = new lambda.SingletonFunction(stack, 'Singleton', {
            uuid: '84c0de93-353f-4217-9b0b-45b6c993251a',
            code: new lambda.InlineCode('def hello(): pass'),
            runtime: lambda.Runtime.PYTHON_2_7,
            handler: 'index.hello',
            timeout: cdk.Duration.minutes(5),
        });
        const dependency = new iam.User(stack, 'dependencyUser');
        // WHEN
        singleton.addDependency(dependency);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Function', {
            DependsOn: [
                'dependencyUser1B9CB07E',
                'SingletonLambda84c0de93353f42179b0b45b6c993251aServiceRole26D59235',
            ],
        }, assert_1.ResourcePart.CompleteDefinition));
        test.done();
    },
    'dependsOn are correctly added'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const singleton = new lambda.SingletonFunction(stack, 'Singleton', {
            uuid: '84c0de93-353f-4217-9b0b-45b6c993251a',
            code: new lambda.InlineCode('def hello(): pass'),
            runtime: lambda.Runtime.PYTHON_2_7,
            handler: 'index.hello',
            timeout: cdk.Duration.minutes(5),
        });
        const user = new iam.User(stack, 'user');
        // WHEN
        singleton.dependOn(user);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::User', {
            DependsOn: [
                'SingletonLambda84c0de93353f42179b0b45b6c993251a840BCC38',
                'SingletonLambda84c0de93353f42179b0b45b6c993251aServiceRole26D59235',
            ],
        }, assert_1.ResourcePart.CompleteDefinition));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,