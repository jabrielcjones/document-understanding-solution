"use strict";
const assert_1 = require("@aws-cdk/assert");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/core");
const events = require("../lib");
module.exports = {
    'minimal example'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'MyFunc', {
            code: lambda.Code.fromInline('boom'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS,
        });
        // WHEN
        handler.addEventSource(new events.ApiEventSource('get', '/foo'));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Resource', {
            PathPart: 'foo',
            ParentId: { 'Fn::GetAtt': ['MyFuncApiEventSourceA7A86A4FFB3F557C', 'RootResourceId'] },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            HttpMethod: 'GET',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4FfooCA6F87E4' },
        }));
        test.done();
    },
    'disjoint routes'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'MyFunc', {
            code: lambda.Code.fromInline('boom'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS,
        });
        // WHEN
        handler.addEventSource(new events.ApiEventSource('get', '/foo'));
        handler.addEventSource(new events.ApiEventSource('post', '/bar'));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Resource', {
            PathPart: 'foo',
            ParentId: { 'Fn::GetAtt': ['MyFuncApiEventSourceA7A86A4FFB3F557C', 'RootResourceId'] },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Resource', {
            PathPart: 'bar',
            ParentId: { 'Fn::GetAtt': ['MyFuncApiEventSourceA7A86A4FFB3F557C', 'RootResourceId'] },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            HttpMethod: 'GET',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4FfooCA6F87E4' },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            HttpMethod: 'POST',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4FbarDFB0F21B' },
        }));
        test.done();
    },
    'tree of routes'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const handler = new lambda.Function(stack, 'MyFunc', {
            code: lambda.Code.fromInline('boom'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS,
        });
        // WHEN
        handler.addEventSource(new events.ApiEventSource('get', '/foo'));
        handler.addEventSource(new events.ApiEventSource('post', '/foo/bar'));
        handler.addEventSource(new events.ApiEventSource('post', '/foo/bar/zoo'));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Resource', {
            PathPart: 'foo',
            ParentId: { 'Fn::GetAtt': ['MyFuncApiEventSourceA7A86A4FFB3F557C', 'RootResourceId'] },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Resource', {
            PathPart: 'bar',
            ParentId: { Ref: 'MyFuncApiEventSourceA7A86A4FfooCA6F87E4' },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            HttpMethod: 'GET',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4FfooCA6F87E4' },
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::ApiGateway::Method', {
            HttpMethod: 'POST',
            ResourceId: { Ref: 'MyFuncApiEventSourceA7A86A4Ffoobar028FFFDE' },
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,