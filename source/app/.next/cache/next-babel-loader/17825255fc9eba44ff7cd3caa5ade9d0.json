{"ast":null,"code":"var __jsx = React.createElement;\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { Fragment, useMemo, useState, useCallback, useEffect } from \"react\";\nimport KendraResultTitle from \"../KendraResultTitle/KendraResultTitle\";\nimport KendraHighlightedText from \"../KendraHighlightedText/KendraHighlightedText\";\nimport KendraResultFooter from \"../KendraResultFooter/KendraResultFooter\";\nimport TooltipButton from \"../TooltipButton/TooltipButton\";\nimport styles from \"./KendraTopResults.scss\";\nimport cs from \"classnames\";\n\nfunction getTopAnswer(text) {\n  if (text && text.Highlights) {\n    for (const highlight of text.Highlights) {\n      const length = highlight.EndOffset - highlight.BeginOffset;\n\n      if (highlight && highlight.TopAnswer && length < MAX_TOP_ANSWER_LENGTH) {\n        return __jsx(\"h1\", null, text.Text.substring(highlight.BeginOffset, highlight.EndOffset));\n      }\n    }\n  }\n\n  return null;\n}\n\nexport default function KendraTopResults({\n  results,\n  submitFeedback\n}) {\n  const renderedResults = useMemo(() => results.map(result => {\n    const answer = result.AdditionalAttributes.find(attr => attr.Key === \"AnswerText\");\n    return __jsx(\"article\", {\n      key: result.id,\n      className: styles.result\n    }, __jsx(KendraResultTitle, {\n      result: result,\n      submitFeedback: submitFeedback\n    }), getTopAnswer(answer.TextWithHighlightsValue), __jsx(\"p\", null, __jsx(KendraHighlightedText, {\n      textWithHighlights: answer.Value.TextWithHighlightsValue\n    })), __jsx(KendraResultFooter, {\n      result: result,\n      submitFeedback: submitFeedback\n    }));\n  }), [results]);\n  const {\n    0: expanded,\n    1: setExpanded\n  } = useState(false);\n  const toggleExpanded = useCallback(() => {\n    setExpanded(e => !e);\n  }, []);\n  if (!results.length) return null;\n  return __jsx(\"div\", {\n    className: styles.topResults\n  }, __jsx(\"header\", null, __jsx(\"h2\", null, \"Amazon Kendra suggested answers\", __jsx(TooltipButton, {\n    tooltip: __jsx(React.Fragment, null, __jsx(\"h4\", null, \"Amazon Kendra suggested answers\"), __jsx(\"p\", null, \"When you type a question, Kendra uses machine learning algorithms to understand the context and return the most relevant results, whether that be a precise answer or an entire document. Kendra will map to the relevant documents and return a specific answer.\"))\n  }, __jsx(\"a\", null, __jsx(\"img\", {\n    src: \"/static/images/icon_tip.svg\"\n  }), \"More info\")))), __jsx(\"div\", {\n    className: styles.results\n  }, renderedResults[0], renderedResults.length > 1 ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: cs(styles.showMore, expanded && styles.expanded),\n    onClick: toggleExpanded\n  }, \"More suggested answers (\", renderedResults.length - 1, \")\"), expanded ? __jsx(\"div\", null, renderedResults.slice(1)) : null) : null));\n}","map":null,"metadata":{},"sourceType":"module"}