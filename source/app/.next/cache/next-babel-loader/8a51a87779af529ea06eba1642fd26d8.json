{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport { createAction } from \"redux-actions\";\nimport { normalize } from \"normalizr\";\nimport { API, Auth } from \"aws-amplify\";\nimport { ENABLE_KENDRA } from '../../../constants/configs';\nimport { SEARCH, CLEAR_SEARCH_RESULTS, SUBMIT_FEEDBACK } from \"../../../constants/action-types\";\nimport { searchResultsSchema, kendraResultsSchema, kendraFilteredResultsSchema } from \"./data\";\n/**\n * Get documents from TextractDemoTextractAPI\n */\n\nexport const search = createAction(SEARCH, async params => {\n  const headers = {\n    Authorization: `Bearer ${(await Auth.currentSession()).getIdToken().getJwtToken()}`\n  };\n  const [esResponse, kendraResponse, kendraFilteredResponse] = await Promise.all([API.get(\"TextractDemoTextractAPI\", \"search\", {\n    headers,\n    response: true,\n    queryStringParameters: _objectSpread({}, params)\n  }), ENABLE_KENDRA ? API.post(\"TextractDemoTextractAPI\", \"searchkendra\", {\n    headers,\n    response: true,\n    queryStringParameters: {},\n    body: {\n      query: params.k,\n      pageNumber: 1,\n      pageSize: 10\n    }\n  }) : null, ENABLE_KENDRA && params.persona ? API.post(\"TextractDemoTextractAPI\", \"searchkendra\", {\n    headers,\n    response: true,\n    queryStringParameters: {},\n    body: {\n      query: params.k,\n      tag: params.persona,\n      pageNumber: 1,\n      pageSize: 10\n    }\n  }) : null]);\n  const data = Array.isArray(esResponse.data) ? esResponse.data : [];\n  let searchTotalMatches = 0;\n  let searchTotalDocuments = 0;\n  const esResults = data.map(result => {\n    searchTotalMatches += result.count;\n    if (result.count) searchTotalDocuments++;\n    return _objectSpread(_objectSpread({}, result), {}, {\n      name: result.name.replace(/^.*\\//, \"\")\n    });\n  });\n  const kendraQueryId = ENABLE_KENDRA ? kendraResponse.data.QueryId : null;\n  const kendraTotalResults = ENABLE_KENDRA ? kendraResponse.data.TotalNumberOfResults : null;\n  const kendraFilteredQueryId = ENABLE_KENDRA && params.persona ? kendraFilteredResponse.data.QueryId : null;\n  const kendraTotalFilteredResults = ENABLE_KENDRA && params.persona ? kendraFilteredResponse.data.TotalNumberOfResults : null;\n  const kendraData = ENABLE_KENDRA ? normalize(kendraResponse.data.ResultItems, kendraResultsSchema).entities : {};\n  const kendraFilteredData = ENABLE_KENDRA && params.persona ? normalize(kendraFilteredResponse.data.ResultItems, kendraFilteredResultsSchema).entities : {};\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, normalize(esResults, searchResultsSchema).entities), kendraData), kendraFilteredData), {}, {\n    meta: {\n      searchTotalMatches,\n      searchTotalDocuments,\n      kendraQueryId,\n      kendraFilteredQueryId,\n      kendraTotalResults,\n      kendraTotalFilteredResults\n    }\n  });\n});\nexport const submitKendraFeedback = createAction(SUBMIT_FEEDBACK, async ({\n  relevance,\n  queryId,\n  resultId\n}) => {\n  const response = await API.post(\"TextractDemoTextractAPI\", \"feedbackkendra\", {\n    headers: {\n      Authorization: `Bearer ${(await Auth.currentSession()).getIdToken().getJwtToken()}`\n    },\n    response: true,\n    body: {\n      relevance,\n      queryId,\n      resultId\n    }\n  });\n});\n/**\n * Clear search results\n */\n\nexport const clearSearchResults = createAction(CLEAR_SEARCH_RESULTS, () => ({\n  searchResults: [],\n  kendraResults: [],\n  kendraFilteredResults: undefined,\n  meta: {\n    searchTotalMatches: 0,\n    searchTotalDocuments: 0,\n    kendraQueryId: null\n  }\n}));","map":null,"metadata":{},"sourceType":"module"}