{"ast":null,"code":"import _slicedToArray from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport { createAction } from \"redux-actions\";\nimport { either, isEmpty, isNil, lensPath, reject, view } from \"ramda\";\nimport { normalize } from \"normalizr\";\nimport { API, Storage, Auth } from \"aws-amplify\";\nimport uuid from \"uuid/v4\";\nimport { SUBMIT_DOCUMENTS, SUBMIT_DOCUMENT, FETCH_DOCUMENTS, FETCH_DOCUMENT, REDACT_DOCUMENT, HIGHLIGHT_DOCUMENT } from \"../../../constants/action-types\";\nimport { documentsSchema, documentSchema } from \"./data\";\nvar lensNextToken = lensPath([\"data\", \"nextToken\"]);\nvar lensDocumentsTotal = lensPath([\"data\", \"Total\"]);\nvar lensDocumentsData = lensPath([\"data\", \"documents\"]);\nvar lensDocumentData = lensPath([\"data\"]);\nexport var submitDocument = createAction(SUBMIT_DOCUMENT, /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var sample, key, response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sample = _ref.sample, key = _ref.key;\n            _context.t0 = API;\n            _context.t1 = \"Bearer \";\n            _context.next = 5;\n            return Auth.currentSession();\n\n          case 5:\n            _context.t2 = _context.sent.getIdToken().getJwtToken();\n            _context.t3 = _context.t1.concat.call(_context.t1, _context.t2);\n            _context.t4 = {\n              Authorization: _context.t3\n            };\n            _context.t5 = {\n              sample: !!sample,\n              key: key\n            };\n            _context.t6 = {\n              headers: _context.t4,\n              response: true,\n              body: _context.t5\n            };\n            _context.next = 12;\n            return _context.t0.post.call(_context.t0, \"TextractDemoTextractAPI\", \"document\", _context.t6);\n\n          case 12:\n            response = _context.sent;\n            data = view(lensDocumentData, response);\n            return _context.abrupt(\"return\", data);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var submitDocuments = createAction(SUBMIT_DOCUMENTS, /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n    var objects, response, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            objects = _ref3.objects;\n            _context2.t0 = API;\n            _context2.t1 = \"Bearer \";\n            _context2.next = 5;\n            return Auth.currentSession();\n\n          case 5:\n            _context2.t2 = _context2.sent.getIdToken().getJwtToken();\n            _context2.t3 = _context2.t1.concat.call(_context2.t1, _context2.t2);\n            _context2.t4 = {\n              Authorization: _context2.t3\n            };\n            _context2.t5 = {\n              objects: objects\n            };\n            _context2.t6 = {\n              headers: _context2.t4,\n              response: true,\n              body: _context2.t5\n            };\n            _context2.next = 12;\n            return _context2.t0.post.call(_context2.t0, \"TextractDemoTextractAPI\", \"document\", _context2.t6);\n\n          case 12:\n            response = _context2.sent;\n            data = view(lensDocumentData, response);\n            return _context2.abrupt(\"return\", data);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}());\n/**\n * Get documents from TextractDemoTextractAPIs\n */\n\nexport var fetchDocuments = createAction(FETCH_DOCUMENTS, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n  var _ref6,\n      nexttoken,\n      response,\n      documentsNextToken,\n      documentsTotal,\n      documents,\n      _normalize,\n      entities,\n      meta,\n      _args3 = arguments;\n\n  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref6 = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {}, nexttoken = _ref6.nextToken;\n          _context3.t0 = API;\n          _context3.t1 = \"Bearer \";\n          _context3.next = 5;\n          return Auth.currentSession();\n\n        case 5:\n          _context3.t2 = _context3.sent.getIdToken().getJwtToken();\n          _context3.t3 = _context3.t1.concat.call(_context3.t1, _context3.t2);\n          _context3.t4 = {\n            Authorization: _context3.t3\n          };\n          _context3.t5 = reject(either(isNil, isEmpty), {\n            nexttoken: nexttoken,\n            type: \"user\"\n          });\n          _context3.t6 = {\n            headers: _context3.t4,\n            response: true,\n            queryStringParameters: _context3.t5\n          };\n          _context3.next = 12;\n          return _context3.t0.get.call(_context3.t0, \"TextractDemoTextractAPI\", \"documents\", _context3.t6);\n\n        case 12:\n          response = _context3.sent;\n          documentsNextToken = view(lensNextToken, response) || null;\n          documentsTotal = view(lensDocumentsTotal, response);\n          documents = view(lensDocumentsData, response).map(function (document) {\n            return _objectSpread(_objectSpread({}, document), {}, {\n              documentName: document.objectName.replace(/^.*\\//, \"\")\n            });\n          });\n          _normalize = normalize(documents, documentsSchema), entities = _normalize.entities;\n          meta = reject(isNil, {\n            documentsNextToken: documentsNextToken,\n            documentsTotal: documentsTotal\n          });\n          return _context3.abrupt(\"return\", _objectSpread(_objectSpread({}, entities), {}, {\n            meta: meta\n          }));\n\n        case 19:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _callee3);\n})));\nexport var fetchSingleDocument = createAction(FETCH_DOCUMENT, /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(documentid) {\n    var response, document;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.t0 = API;\n            _context4.t1 = \"Bearer \";\n            _context4.next = 4;\n            return Auth.currentSession();\n\n          case 4:\n            _context4.t2 = _context4.sent.getIdToken().getJwtToken();\n            _context4.t3 = _context4.t1.concat.call(_context4.t1, _context4.t2);\n            _context4.t4 = {\n              Authorization: _context4.t3\n            };\n            _context4.t5 = {\n              documentid: documentid\n            };\n            _context4.t6 = {\n              headers: _context4.t4,\n              response: true,\n              queryStringParameters: _context4.t5\n            };\n            _context4.next = 11;\n            return _context4.t0.get.call(_context4.t0, \"TextractDemoTextractAPI\", \"document\", _context4.t6);\n\n          case 11:\n            response = _context4.sent;\n            document = view(lensDocumentData, response);\n            return _context4.abrupt(\"return\", normalize(document, documentSchema).entities);\n\n          case 14:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function (_x3) {\n    return _ref7.apply(this, arguments);\n  };\n}());\n/**\n * Get document from TextractDemoTextractAPI\n */\n\nexport var fetchDocument = createAction(FETCH_DOCUMENT, /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(documentid) {\n    var response, document, documentId, objectName, bucketName, documentName, fileNameWithoutExtension, documentPublicSubPath, resultDirectory, textractResponsePath, comprehendMedicalResponsePath, comprehendResponsePath, _yield$Promise$all, _yield$Promise$all2, documentData, searchablePdfData, documentBlob, searchablePdfBlob, s3Response, textractResponse, s3ComprehendMedicalResponse, comprehendMedicalRespone, s3ComprehendResponse, comprehendRespone;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.t0 = API;\n            _context5.t1 = \"Bearer \";\n            _context5.next = 4;\n            return Auth.currentSession();\n\n          case 4:\n            _context5.t2 = _context5.sent.getIdToken().getJwtToken();\n            _context5.t3 = _context5.t1.concat.call(_context5.t1, _context5.t2);\n            _context5.t4 = {\n              Authorization: _context5.t3\n            };\n            _context5.t5 = {\n              documentid: documentid\n            };\n            _context5.t6 = {\n              headers: _context5.t4,\n              response: true,\n              queryStringParameters: _context5.t5\n            };\n            _context5.next = 11;\n            return _context5.t0.get.call(_context5.t0, \"TextractDemoTextractAPI\", \"document\", _context5.t6);\n\n          case 11:\n            response = _context5.sent;\n            document = view(lensDocumentData, response);\n            documentId = document.documentId, objectName = document.objectName, bucketName = document.bucketName; // Remove the last slash and everything before it\n\n            documentName = objectName.replace(/^.*\\//, \"\");\n            fileNameWithoutExtension = documentName.split(\".\")[0]; // Amplify prepends public/ to the path, so we have to strip it\n\n            documentPublicSubPath = objectName.replace(\"public/\", \"\");\n            resultDirectory = \"\".concat(documentId, \"/output\");\n            textractResponsePath = \"\".concat(resultDirectory, \"/textract/response.json\");\n            comprehendMedicalResponsePath = \"\".concat(resultDirectory, \"/comprehend/comprehendMedicalEntities.json\");\n            comprehendResponsePath = \"\".concat(resultDirectory, \"/comprehend/comprehendEntities.json\"); // Get a pre-signed URL for the original document upload\n\n            _context5.next = 23;\n            return Promise.all([Storage.get(documentPublicSubPath, {\n              bucket: bucketName,\n              download: true\n            }), Storage.get(\"\".concat(resultDirectory, \"/\").concat(fileNameWithoutExtension, \"-searchable.pdf\"), {\n              download: true\n            })]);\n\n          case 23:\n            _yield$Promise$all = _context5.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            documentData = _yield$Promise$all2[0];\n            searchablePdfData = _yield$Promise$all2[1];\n            documentBlob = new Blob([documentData.Body], {\n              type: documentData.contentType\n            });\n            searchablePdfBlob = new Blob([searchablePdfData.Body], {\n              type: \"application/pdf\"\n            }); // Get the raw textract response data from a json file on S3\n\n            _context5.next = 31;\n            return Storage.get(textractResponsePath, {\n              download: true\n            });\n\n          case 31:\n            s3Response = _context5.sent;\n            textractResponse = JSON.parse(s3Response.Body ? s3Response.Body.toString() : null); // Get the raw comprehend medical response data from a json file on S3\n\n            _context5.next = 35;\n            return Storage.get(comprehendMedicalResponsePath, {\n              download: true\n            });\n\n          case 35:\n            s3ComprehendMedicalResponse = _context5.sent;\n            comprehendMedicalRespone = JSON.parse(s3ComprehendMedicalResponse.Body ? s3ComprehendMedicalResponse.Body.toString() : null); // Get the raw comprehend response data from a json file on S3\n\n            _context5.next = 39;\n            return Storage.get(comprehendResponsePath, {\n              download: true\n            });\n\n          case 39:\n            s3ComprehendResponse = _context5.sent;\n            comprehendRespone = JSON.parse(s3ComprehendResponse.Body ? s3ComprehendResponse.Body.toString() : null);\n            return _context5.abrupt(\"return\", normalize(_objectSpread(_objectSpread({}, document), {}, {\n              documentURL: URL.createObjectURL(documentBlob),\n              searchablePdfURL: URL.createObjectURL(searchablePdfBlob),\n              documentName: documentName,\n              textractResponse: textractResponse,\n              textractFetchedAt: Date.now(),\n              comprehendMedicalRespone: comprehendMedicalRespone,\n              comprehendRespone: comprehendRespone,\n              resultDirectory: resultDirectory\n            }), documentSchema).entities);\n\n          case 42:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x4) {\n    return _ref8.apply(this, arguments);\n  };\n}());\nexport var deleteDocument = createAction(FETCH_DOCUMENT, /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(documentid) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.t0 = API;\n            _context6.t1 = \"Bearer \";\n            _context6.next = 4;\n            return Auth.currentSession();\n\n          case 4:\n            _context6.t2 = _context6.sent.getIdToken().getJwtToken();\n            _context6.t3 = _context6.t1.concat.call(_context6.t1, _context6.t2);\n            _context6.t4 = {\n              Authorization: _context6.t3\n            };\n            _context6.t5 = {\n              documentid: documentid\n            };\n            _context6.t6 = {\n              headers: _context6.t4,\n              response: true,\n              queryStringParameters: _context6.t5\n            };\n            _context6.next = 11;\n            return _context6.t0.del.call(_context6.t0, \"TextractDemoTextractAPI\", \"document\", _context6.t6);\n\n          case 11:\n            response = _context6.sent;\n            return _context6.abrupt(\"return\", normalize({\n              documentId: documentid,\n              deleted: true\n            }, documentSchema).entities);\n\n          case 13:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function (_x5) {\n    return _ref9.apply(this, arguments);\n  };\n}());\nexport var addRedactions = createAction(REDACT_DOCUMENT, function (documentId, pageNumber, redactions) {\n  var keyedRedactions = redactions.reduce(function (acc, r) {\n    acc[uuid()] = r;\n    return acc;\n  }, {});\n  return normalize({\n    documentId: documentId,\n    redactions: _defineProperty({}, pageNumber, keyedRedactions)\n  }, documentSchema).entities;\n});\nexport var addHighlights = createAction(HIGHLIGHT_DOCUMENT, function (documentId, pageNumber, highlights) {\n  var response = normalize({\n    documentId: documentId,\n    highlights: highlights\n  }, documentSchema).entities;\n  return response;\n});\nexport var clearRedactions = createAction(REDACT_DOCUMENT, function (documentId) {\n  return normalize({\n    documentId: documentId,\n    redactions: false\n  }, documentSchema).entities;\n});\nexport var clearHighlights = createAction(HIGHLIGHT_DOCUMENT, function (documentId) {\n  return normalize({\n    documentId: documentId,\n    highlights: []\n  }, documentSchema).entities;\n});","map":null,"metadata":{},"sourceType":"module"}