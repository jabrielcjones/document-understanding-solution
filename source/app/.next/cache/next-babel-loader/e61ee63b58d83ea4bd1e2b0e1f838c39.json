{"ast":null,"code":"var __jsx = React.createElement;\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { Fragment, useRef, useEffect, useMemo, useCallback } from 'react';\nimport { groupWith } from 'ramda';\nimport cs from 'classnames';\nimport Button from '../Button/Button';\nimport { getMultiPageWordsBySearch, resetFormsonPage } from '../../utils/document';\nimport { COMPREHEND_MEDICAL_SERVICE, COMPREHEND_SERVICE } from '../../utils/dus-constants';\nimport css from './EntitiesCheckbox.scss';\nexport default function EntitiesCheckbox({\n  entities,\n  visible,\n  pageCount,\n  currentPageNumber,\n  onSwitchPage,\n  onRedact,\n  onHighlight,\n  showRedaction,\n  onRedactAll,\n  onDownloadPrimary,\n  onDownloadSecondary,\n  comprehendService,\n  document\n}) {\n  const container = useRef();\n  useEffect(() => {\n    if (visible && container.current) {\n      const firstOnThisPage = container.current.querySelector(`.${css.onThisPage}`);\n      if (firstOnThisPage) firstOnThisPage.scrollIntoView();\n      onHighlight(getMultiPageWordsBySearch(document, currentPageNumber, ['']));\n      resetFormsonPage();\n    }\n  }, [currentPageNumber, visible]);\n  let is_comprehend_medical = false;\n  if (comprehendService == COMPREHEND_MEDICAL_SERVICE) is_comprehend_medical = true;\n\n  if (!entities.length && visible) {\n    return __jsx(\"p\", {\n      className: css.noEntity\n    }, \"No \", is_comprehend_medical ? `Medical ` : null, \"Entities detected\");\n  }\n\n  return __jsx(\"div\", {\n    className: cs(css.entityList, visible && css.visible),\n    ref: container\n  }, __jsx(\"ul\", null, __jsx(\"h4\", null, is_comprehend_medical ? `Medical ` : null, \"Entities: \", entities.length || 0, \" Found\"), groupWith((a, b) => a.pageNumber === b.pageNumber)(entities).map((pairs, i) => __jsx(Fragment, {\n    key: pairs[0].pageNumber\n  }, pageCount > 1 ? __jsx(\"li\", {\n    key: `pn${i}`,\n    className: cs(css.pageSeparator, pairs[0].pageNumber === currentPageNumber && css.onThisPage)\n  }, \"Page \", pairs[0].pageNumber) : null, __jsx(\"form\", {\n    id: `${comprehendService}-${i}-form`\n  }, pairs.map(({\n    id,\n    entity,\n    value,\n    pageNumber\n  }, i) => __jsx(\"li\", {\n    key: i,\n    className: cs(css.ev, pageNumber === currentPageNumber && css.onThisPage, showRedaction && css.hasRedact)\n  }, __jsx(\"input\", {\n    id: entity,\n    name: \"entityChoice\",\n    type: \"radio\",\n    onClick: e => {\n      e.stopPropagation();\n      onSwitchPage(pageNumber);\n      onHighlight(getMultiPageWordsBySearch(document, pageNumber, value), pageNumber);\n    }\n  }), \" \", __jsx(\"label\", {\n    for: entity\n  }, entity), showRedaction ? __jsx(\"span\", {\n    className: css.redactSpan\n  }, __jsx(\"a\", {\n    title: \"Redact Entity Matches\",\n    className: css.valueRedact,\n    onClick: e => {\n      e.stopPropagation();\n      onRedact(pageNumber, getMultiPageWordsBySearch(document, pageNumber, value));\n      onSwitchPage(pageNumber);\n    }\n  }, \"Redact\")) : null)))))), __jsx(\"footer\", {\n    className: css.actions\n  }, __jsx(\"div\", {\n    className: css.downloadButtons\n  }, __jsx(Button, {\n    onClick: onDownloadPrimary\n  }, \"\\u2B07 \", is_comprehend_medical ? `Medical ` : null, \" Entities\")), is_comprehend_medical ? __jsx(\"div\", {\n    className: css.downloadButtons\n  }, __jsx(Button, {\n    className: css.downloadButton,\n    onClick: onDownloadSecondary\n  }, \"\\u2B07 ICD-10 Ontologies\")) : null));\n}","map":null,"metadata":{},"sourceType":"module"}