{"ast":null,"code":"var __jsx = React.createElement;\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { Fragment, useRef, useEffect, useMemo, useCallback } from 'react';\nimport { groupWith } from 'ramda';\nimport cs from 'classnames';\nimport Button from '../Button/Button';\nimport { getMultiPageWordsBySearch, resetFormsonPage } from '../../utils/document';\nimport { COMPREHEND_MEDICAL_SERVICE, COMPREHEND_SERVICE } from '../../utils/dus-constants';\nimport css from './EntitiesCheckbox.scss';\nexport default function EntitiesCheckbox(_ref) {\n  var entities = _ref.entities,\n      visible = _ref.visible,\n      pageCount = _ref.pageCount,\n      currentPageNumber = _ref.currentPageNumber,\n      onSwitchPage = _ref.onSwitchPage,\n      onRedact = _ref.onRedact,\n      onHighlight = _ref.onHighlight,\n      showRedaction = _ref.showRedaction,\n      onRedactAll = _ref.onRedactAll,\n      onDownloadPrimary = _ref.onDownloadPrimary,\n      onDownloadSecondary = _ref.onDownloadSecondary,\n      comprehendService = _ref.comprehendService,\n      document = _ref.document;\n  var container = useRef();\n  useEffect(function () {\n    if (visible && container.current) {\n      var firstOnThisPage = container.current.querySelector(\".\".concat(css.onThisPage));\n      if (firstOnThisPage) firstOnThisPage.scrollIntoView();\n      onHighlight(getMultiPageWordsBySearch(document, currentPageNumber, ['']));\n      resetFormsonPage();\n    }\n  }, [currentPageNumber, visible]);\n  var is_comprehend_medical = false;\n  if (comprehendService == COMPREHEND_MEDICAL_SERVICE) is_comprehend_medical = true;\n\n  if (!entities.length && visible) {\n    return __jsx(\"p\", {\n      className: css.noEntity\n    }, \"No \", is_comprehend_medical ? \"Medical \" : null, \"Entities detected\");\n  }\n\n  return __jsx(\"div\", {\n    className: cs(css.entityList, visible && css.visible),\n    ref: container\n  }, __jsx(\"ul\", null, __jsx(\"h4\", null, is_comprehend_medical ? \"Medical \" : null, \"Entities: \", entities.length || 0, \" Found\"), groupWith(function (a, b) {\n    return a.pageNumber === b.pageNumber;\n  })(entities).map(function (pairs, i) {\n    return __jsx(Fragment, {\n      key: pairs[0].pageNumber\n    }, pageCount > 1 ? __jsx(\"li\", {\n      key: \"pn\".concat(i),\n      className: cs(css.pageSeparator, pairs[0].pageNumber === currentPageNumber && css.onThisPage)\n    }, \"Page \", pairs[0].pageNumber) : null, __jsx(\"form\", {\n      id: \"\".concat(comprehendService, \"-\").concat(i, \"-form\")\n    }, pairs.map(function (_ref2, i) {\n      var id = _ref2.id,\n          entity = _ref2.entity,\n          value = _ref2.value,\n          pageNumber = _ref2.pageNumber;\n      return __jsx(\"li\", {\n        key: i,\n        className: cs(css.ev, pageNumber === currentPageNumber && css.onThisPage, showRedaction && css.hasRedact)\n      }, __jsx(\"input\", {\n        id: entity,\n        name: \"entityChoice\",\n        type: \"radio\",\n        onClick: function onClick(e) {\n          e.stopPropagation();\n          onSwitchPage(pageNumber);\n          onHighlight(getMultiPageWordsBySearch(document, pageNumber, value), pageNumber);\n        }\n      }), \" \", __jsx(\"label\", {\n        for: entity\n      }, entity), showRedaction ? __jsx(\"span\", {\n        className: css.redactSpan\n      }, __jsx(\"a\", {\n        title: \"Redact Entity Matches\",\n        className: css.valueRedact,\n        onClick: function onClick(e) {\n          e.stopPropagation();\n          onRedact(pageNumber, getMultiPageWordsBySearch(document, pageNumber, value));\n          onSwitchPage(pageNumber);\n        }\n      }, \"Redact\")) : null);\n    })));\n  })), __jsx(\"footer\", {\n    className: css.actions\n  }, __jsx(\"div\", {\n    className: css.downloadButtons\n  }, __jsx(Button, {\n    onClick: onDownloadPrimary\n  }, \"\\u2B07 \", is_comprehend_medical ? \"Medical \" : null, \" Entities\")), is_comprehend_medical ? __jsx(\"div\", {\n    className: css.downloadButtons\n  }, __jsx(Button, {\n    className: css.downloadButton,\n    onClick: onDownloadSecondary\n  }, \"\\u2B07 ICD-10 Ontologies\")) : null));\n}","map":null,"metadata":{},"sourceType":"module"}