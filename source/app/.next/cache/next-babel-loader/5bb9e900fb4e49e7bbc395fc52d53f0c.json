{"ast":null,"code":"var __jsx = React.createElement;\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { Fragment, useEffect, useState, useCallback } from \"react\";\nimport App, { Container } from \"next/app\";\nimport getConfig from \"next/config\";\nimport Head from \"next/head\";\nimport Router from \"next/router\";\nimport Amplify, { Auth } from \"aws-amplify\";\nimport { times, reject, isNil } from \"ramda\";\nimport { Provider } from \"react-redux\";\nimport withRedux from \"next-redux-wrapper\";\nimport initStore from \"../store/store\";\nimport Header from \"../components/Header/Header\";\nimport { setSelectedTrack, dismissWalkthrough } from \"../store/ui/actions\";\nimport \"../styles/global.scss\";\nimport css from \"./app.scss\";\nconst {\n  publicRuntimeConfig: {\n    APIGateway,\n    bucket,\n    identityPoolId,\n    region,\n    userPoolWebClientId,\n    userPoolId\n  }\n} = getConfig();\nAmplify.configure({\n  Auth: {\n    identityPoolId,\n    region,\n    userPoolId,\n    userPoolWebClientId\n  },\n  Storage: {\n    AWSS3: {\n      bucket,\n      level: \"public\",\n      region\n    }\n  },\n  API: {\n    endpoints: [{\n      name: \"TextractDemoTextractAPI\",\n      endpoint: `https://${APIGateway}.execute-api.${region}.amazonaws.com/prod/`\n    }]\n  }\n}); // This is a bit of a hack to ensure styles reload on client side route changes.\n// See: https://github.com/zeit/next-plugins/issues/282#issuecomment-480740246\n\nif (false) {\n  Router.events.on(\"routeChangeComplete\", () => {\n    const path = \"/_next/static/css/styles.chunk.css\";\n    const chunksSelector = `link[href*=\"${path}\"]`;\n    const chunksNodes = document.querySelectorAll(chunksSelector);\n    const timestamp = new Date().valueOf();\n    chunksNodes[0].href = `${path}?${timestamp}`;\n  });\n}\n\nclass AppLayout extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    let pageProps = {};\n    const {\n      pathname\n    } = ctx;\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return {\n      pageProps,\n      pathname\n    };\n  }\n\n  componentDidMount() {\n    // Set selected track from localStorage\n    // This allows you to hard refresh a page and maintain some state\n    if (localStorage) {\n      const {\n        store\n      } = this.props;\n      const cachedTrack = localStorage.getItem(\"track\");\n      if (cachedTrack) store.dispatch(setSelectedTrack(cachedTrack));\n      const previouslyDismissedWalkthrough = localStorage.getItem(\"dismissedWalkthrough\");\n      if (previouslyDismissedWalkthrough) store.dispatch(dismissWalkthrough());\n    }\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      pathname,\n      store\n    } = this.props;\n    const {\n      pageTitle\n    } = pageProps; // Don't render the app unless the user is logged in or this is a public route.\n\n    return __jsx(Provider, {\n      store: store\n    }, __jsx(Head, null, __jsx(\"title\", null, pageTitle ? `${pageTitle} | DUS ` : `DUS`), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/ico\",\n      href: \"/static/images/favicon.ico\"\n    }), __jsx(\"link\", {\n      rel: \"shortcut icon\",\n      type: \"image/ico\",\n      href: \"/static/images/favicon.ico\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"57x57\",\n      href: \"/static/images/touch-icon-iphone-114-smile.png\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"72x72\",\n      href: \"/static/images/touch-icon-ipad-144-smile.png\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"114x114\",\n      href: \"/static/images/touch-icon-iphone-114-smile.png\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"144x144\",\n      href: \"/static/images/touch-icon-ipad-144-smile.png\"\n    })), __jsx(Page, {\n      pathname: pathname,\n      pageProps: pageProps\n    }, __jsx(Component, pageProps)));\n  }\n\n}\n\nfunction Page({\n  children,\n  pageProps,\n  pathname\n}) {\n  const {\n    showNavigation,\n    backButton,\n    pageTitle: heading\n  } = pageProps;\n  const showGrid = useGridOverlay(); // All routes are protected by default. We whitelist public routes.\n  // Authorization does not occur on public routes.\n\n  const isPublicRoute = [\"/styleguide\"].indexOf(pathname) >= 0; // The Login page is technically a public route, but we handle it separately because\n  // we do an auth check on it in order to redirect if the user is already logged in.\n\n  const isLoginRoute = pathname === \"/\";\n  const {\n    0: isLoggedIn,\n    1: setLoggedIn\n  } = useState(\"pending\"); // Don't render the app unless the user is logged in, or this is a public route,\n  // or this is the login route and the user is not logged in.\n\n  const shouldRenderApp = isLoggedIn === true || isPublicRoute || isLoginRoute && !isLoggedIn; // Authorize user\n  // NOTE: This method of authorization is not sufficient to protect static content.\n  // The authorization happens on the client side only, which means all static\n  // content still gets delivered to the browser in the initial page response\n  // (even though we may not render it with React). However, all protected content\n  // in this app is delivered by API calls that have their own authorization checks.\n\n  useEffect(() => {\n    // If this is a public route, we don't need to authorize.\n    if (isPublicRoute) return; // Try to get the user's session info\n\n    Auth.currentSession().then(async () => {\n      // User has a session\n      isLoginRoute && (await Router.push(\"/home\"));\n      setLoggedIn(true);\n    }).catch(() => {\n      // No user session, redirect to login if not already there\n      setLoggedIn(false);\n      !isLoginRoute && Router.push(\"/\");\n    });\n  }, [isLoginRoute, isPublicRoute]);\n  return shouldRenderApp && __jsx(\"div\", {\n    className: css.container\n  }, __jsx(Header, reject(isNil, {\n    heading,\n    showNavigation,\n    backButton\n  })), __jsx(\"main\", null, children), showGrid && __jsx(\"div\", {\n    className: css.gridContainer\n  }, times(i => __jsx(\"div\", {\n    key: i,\n    className: css.gridCol\n  }), 12)));\n}\n/**\n * This is a helper utility that will overlay a grid on top of the app.\n * This allows us to ensure elements fall on the grid while developing.\n * (Press control + L to toggle the grid)\n */\n\n\nfunction useGridOverlay() {\n  const {\n    0: showGrid,\n    1: setShowGrid\n  } = useState(false); // Toggle grid handler\n\n  const handleKeyUp = useCallback(e => {\n    const L = 76;\n    const {\n      ctrlKey,\n      keyCode\n    } = e;\n\n    if (ctrlKey && keyCode === L) {\n      e.preventDefault();\n      setShowGrid(showGrid => !showGrid);\n    }\n  }, []); // Add/remove event listener\n\n  useEffect(() => {\n    document.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      document.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, [handleKeyUp]);\n  return showGrid;\n}\n\nexport default withRedux(initStore)(AppLayout);","map":null,"metadata":{},"sourceType":"module"}