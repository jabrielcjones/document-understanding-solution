{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React from 'react';\nimport Link from 'next/link';\nimport classNames from 'classnames';\nimport Loading from '../Loading/Loading';\nimport DocumentListItem from '../DocumentListItem/DocumentListItem';\nimport css from './DocumentList.scss';\nDocumentList.defaultProps = {\n  items: []\n};\n\nfunction isSupportedExtension(extension) {\n  if (['png', 'jpg', 'jpeg', 'pdf'].indexOf(extension.toLowerCase()) >= 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction returnFormattedExtension(extension) {\n  if (isSupportedExtension(extension)) {\n    return extension.toUpperCase();\n  } else {\n    return \"NOT SUPPORTED\";\n  }\n}\n\nexport default function DocumentList({\n  className,\n  items\n}) {\n  const listClassNames = classNames(css.list, className);\n  return !!items.length && __jsx(\"nav\", {\n    className: listClassNames\n  }, __jsx(\"header\", {\n    className: css.listHeader\n  }, __jsx(\"span\", {\n    className: css.leftSpace\n  }), __jsx(\"span\", {\n    className: css.nameHeader\n  }, \"File Name\"), __jsx(\"span\", {\n    className: css.typeHeader\n  }, \"Type\"), __jsx(\"span\", {\n    className: css.statusHeader\n  }, \"Status\"), __jsx(\"span\", {\n    className: css.rightSpace\n  })), __jsx(\"ul\", null, items.map(({\n    id,\n    title,\n    link,\n    documentStatus\n  }, index) => {\n    const _ref = link || {},\n          {\n      target\n    } = _ref,\n          linkProps = _objectWithoutProperties(_ref, [\"target\"]);\n\n    const filenameParts = title.split('.');\n    const extension = returnFormattedExtension(filenameParts.pop());\n    const basename = filenameParts.join('.');\n    return __jsx(DocumentListItem, _extends({\n      key: id\n    }, {\n      id,\n      title,\n      basename,\n      extension,\n      documentStatus,\n      link\n    }));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}