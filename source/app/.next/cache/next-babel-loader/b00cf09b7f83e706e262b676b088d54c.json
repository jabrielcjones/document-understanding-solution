{"ast":null,"code":"import _defineProperty from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { Fragment, useCallback, useEffect, useRef, useState, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { reject, either, isNil, isEmpty, groupWith } from 'ramda';\nimport queryString from 'query-string';\nimport cs from 'classnames';\nimport { Storage } from 'aws-amplify';\nimport Loading from '../../components/Loading/Loading';\nimport DocumentViewer from '../../components/DocumentViewer/DocumentViewer';\nimport DocumentSearchBar from '../../components/DocumentSearchBar/DocumentSearchBar';\nimport Tabs from '../../components/Tabs/Tabs';\nimport { fetchDocument, addRedactions, clearRedactions, addHighlights, clearHighlights } from '../../store/entities/documents/actions';\nimport { getDocumentById } from '../../store/entities/documents/selectors';\nimport { setHeaderProps, setSelectedTrack } from '../../store/ui/actions';\nimport { getSelectedTrackId } from '../../store/ui/selectors';\nimport { setCurrentPageNumber, setDocumentSearchQuery } from '../../store/entities/meta/actions';\nimport { getDocumentSearchQuery, getCurrentPageNumber } from '../../store/entities/meta/selectors';\nimport { getDocumentPageCount, getPageLines, getDocumentLines, getDocumentEntityPairs, getDocumentKeyValuePairs, getPageTables, getPageWordsBySearch, getDocumentTables } from '../../utils/document';\nimport { COMPREHEND_MEDICAL_SERVICE, COMPREHEND_SERVICE } from '../../utils/dus-constants';\nimport css from './view.scss';\nimport Button from '../../components/Button/Button';\nimport KeyValueList from '../../components/KeyValueList/KeyValueList';\nimport RawTextLines from '../../components/RawTextLines/RawTextLines';\nimport EntitiesCheckbox from '../../components/EntitiesCheckbox/EntitiesCheckbox';\nimport DocumentPreview from '../../components/DocumentPreview/DocumentPreview';\nimport TableResults from '../../components/TableResults/TableResults';\nDocument.defaultProps = {\n  document: {}\n};\n\nDocument.getInitialProps = function (_ref) {\n  var query = _ref.query,\n      store = _ref.store;\n  var state = store.getState();\n\n  var _ref2 = query || {},\n      id = _ref2.id;\n\n  var _ref3 = getDocumentById(state, id) || {},\n      documentName = _ref3.documentName;\n\n  var props = {\n    showNavigation: false,\n    backButton: true\n  };\n  return props;\n};\n\nfunction Document(_ref4) {\n  var currentPageNumber = _ref4.currentPageNumber,\n      dispatch = _ref4.dispatch,\n      id = _ref4.id,\n      document = _ref4.document,\n      pageTitle = _ref4.pageTitle,\n      searchQuery = _ref4.searchQuery,\n      track = _ref4.track;\n  // TODO: Ensure id corresponds to a valid resource, otherwise 404\n  // e.g. /documents/export and /documents/view should fail\n  var isDocumentFetched = !!document.textractResponse && !!document.comprehendMedicalResponse && !!document.comprehendResponse;\n\n  var _useFetchDocument = useFetchDocument(dispatch, id, isDocumentFetched),\n      status = _useFetchDocument.status;\n\n  var pageCount = getDocumentPageCount(document);\n  var documentName = document.documentName,\n      documentURL = document.documentURL,\n      searchablePdfURL = document.searchablePdfURL; // Reset currentPageNumber on mount\n\n  useEffect(function () {\n    dispatch(setCurrentPageNumber(1));\n  }, [dispatch]);\n  useEffect(function () {\n    return function () {\n      dispatch(clearRedactions(id));\n    };\n  }, [dispatch, id]); // Set search results data\n\n  var wordsMatchingSearch = useMemo(function () {\n    return getPageWordsBySearch(document, currentPageNumber, searchQuery);\n  }, [document, currentPageNumber, searchQuery]);\n  var docData = useMemo(function () {\n    var pairs = getDocumentKeyValuePairs(document);\n    var tables = getDocumentTables(document);\n    var lines = getDocumentLines(document);\n    var entities = getDocumentEntityPairs(document, COMPREHEND_SERVICE);\n    var medicalEntities = getDocumentEntityPairs(document, COMPREHEND_MEDICAL_SERVICE);\n    return {\n      pairs: pairs,\n      tables: tables,\n      lines: lines,\n      entities: entities,\n      medicalEntities: medicalEntities\n    }; // eslint-disable-next-line\n  }, [document, document.textractResponse, document.medicalComprehendResponse, document.comprehendResponse]); // Set the paged content for each tab\n\n  var pageData = useMemo(function () {\n    var lines = getPageLines(document, currentPageNumber);\n    var pairs = docData.pairs.filter(function (d) {\n      return d.pageNumber === currentPageNumber;\n    });\n    var tables = docData.tables.filter(function (d) {\n      return d.pageNumber === currentPageNumber;\n    });\n    var entities = docData.entities.filter(function (d) {\n      return d.pageNumber === currentPageNumber;\n    });\n    var medicalEntities = docData.medicalEntities.filter(function (d) {\n      return d.pageNumber === currentPageNumber;\n    });\n    return {\n      lines: lines,\n      pairs: pairs,\n      tables: tables,\n      entities: entities,\n      medicalEntities: medicalEntities\n    }; // eslint-disable-next-line\n  }, [document, document.textractResponse, document.comprehendMedicalResponse, currentPageNumber, docData.pairs, docData.entities, docData.medicalEntities, docData.tables]);\n\n  var _useState = useState('search'),\n      tab = _useState[0],\n      selectTab = _useState[1];\n\n  var _useState2 = useState('search'),\n      trackTab = _useState2[0],\n      selectTrack = _useState2[1];\n\n  var downloadKV = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var resultDirectory, url;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            resultDirectory = document.resultDirectory;\n            _context.next = 3;\n            return Storage.get(\"\".concat(resultDirectory, \"/textract/page-\").concat(currentPageNumber, \"-forms.csv\"), {\n              expires: 300\n            });\n\n          case 3:\n            url = _context.sent;\n            window.open(url);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [currentPageNumber, document]);\n  var downloadEntities = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var resultDirectory, url;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            resultDirectory = document.resultDirectory;\n            _context2.next = 3;\n            return Storage.get(\"\".concat(resultDirectory, \"/comprehend/comprehendEntities.json\"), {\n              expires: 300\n            });\n\n          case 3:\n            url = _context2.sent;\n            window.open(url);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [document]);\n  var downloadMedicalEntities = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var resultDirectory, url;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            resultDirectory = document.resultDirectory;\n            _context3.next = 3;\n            return Storage.get(\"\".concat(resultDirectory, \"/comprehend/comprehendMedicalEntities.json\"), {\n              expires: 300\n            });\n\n          case 3:\n            url = _context3.sent;\n            window.open(url);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [document]);\n  var downloadMedicalICD10Ontologies = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var resultDirectory, url;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            resultDirectory = document.resultDirectory;\n            _context4.next = 3;\n            return Storage.get(\"\".concat(resultDirectory, \"/comprehend/comprehendMedicalICD10.json\"), {\n              expires: 300\n            });\n\n          case 3:\n            url = _context4.sent;\n            window.open(url);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })), [document]);\n  var redactMatches = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            dispatch(addRedactions(id, currentPageNumber, wordsMatchingSearch));\n            dispatch(setDocumentSearchQuery(''));\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  })), [currentPageNumber, dispatch, id, wordsMatchingSearch]);\n  var redact = useCallback( /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(bbox) {\n      var pageNumber,\n          _args6 = arguments;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              pageNumber = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : currentPageNumber;\n              dispatch(addRedactions(id, pageNumber, [bbox]));\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x) {\n      return _ref10.apply(this, arguments);\n    };\n  }(), [currentPageNumber, dispatch, id]);\n  var highlightEntities = useCallback( /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(bbox) {\n      var pageNumber,\n          _args7 = arguments;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              pageNumber = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : currentPageNumber;\n              dispatch(addHighlights(id, pageNumber, bbox));\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x2) {\n      return _ref11.apply(this, arguments);\n    };\n  }(), [currentPageNumber, dispatch, id]);\n  var clearReds = useCallback(function () {\n    dispatch(clearRedactions(id));\n  }, [dispatch, id]);\n  var redactAllValues = useCallback( /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(bbox) {\n      var pageNumber,\n          _args8 = arguments;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              pageNumber = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : currentPageNumber;\n              dispatch(addRedactions(id, currentPageNumber, pageData.pairs.map(function (p) {\n                return p.valueBoundingBox;\n              })));\n\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function (_x3) {\n      return _ref12.apply(this, arguments);\n    };\n  }(), [currentPageNumber, dispatch, id, pageData.pairs]);\n  var redactEntityMatches = useCallback( /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(pageNumber, bboxlist) {\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              dispatch(addRedactions(id, pageNumber, bboxlist.map(function (p) {\n                return p;\n              })));\n\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref13.apply(this, arguments);\n    };\n  }(), [currentPageNumber, dispatch, id]);\n  var contentRef = useRef();\n  var downloadRedacted = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n    var theThing, cnv, ctx, x, y, margin;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            theThing = contentRef.current.querySelector('canvas,img');\n            cnv = window.document.createElement('canvas'); // TODO the resolution is just based on the viewport for pdfs. It shouldn't be.\n\n            cnv.width = theThing.naturalWidth || theThing.width;\n            cnv.height = theThing.naturalHeight || theThing.height;\n            ctx = cnv.getContext('2d');\n            ctx.drawImage(theThing, 0, 0);\n            ctx.fillStyle = '#000';\n\n            x = function x(val) {\n              return val * cnv.width;\n            };\n\n            y = function y(val) {\n              return val * cnv.height;\n            };\n\n            margin = 2;\n            Object.values(document.redactions[currentPageNumber]).forEach(function (red) {\n              ctx.fillRect(x(red.Left) - margin, y(red.Top) - margin, x(red.Width) + 2 * margin, y(red.Height) + 2 * margin);\n            });\n            cnv.toBlob(function (blob) {\n              var a = window.document.createElement('a');\n              a.href = URL.createObjectURL(blob);\n              a.target = '_blank';\n              a.style.display = 'none';\n              a.download = document.objectName.split('/').pop().replace(/\\.[^.]+$/, '-REDACTED.png');\n              window.document.body.appendChild(a);\n              a.click();\n            }, 'image/png');\n\n          case 12:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  })), [currentPageNumber, document.objectName, document.redactions]);\n  var pagePairsAsMarks = useMemo(function () {\n    return pageData.pairs.reduce(function (acc, _ref15) {\n      var id = _ref15.id,\n          keyBoundingBox = _ref15.keyBoundingBox,\n          valueBoundingBox = _ref15.valueBoundingBox;\n      return [].concat(_toConsumableArray(acc), [_objectSpread(_objectSpread({}, keyBoundingBox), {}, {\n        id: id,\n        type: 'key'\n      }), _objectSpread(_objectSpread({}, valueBoundingBox), {}, {\n        id: id,\n        type: 'value'\n      })]);\n    }, []);\n  }, [pageData.pairs]);\n  var pageLinesAsMarks = useMemo(function () {\n    return pageData.lines.map(function (_ref16) {\n      var id = _ref16.id,\n          boundingBox = _ref16.boundingBox;\n      return _objectSpread({\n        id: id\n      }, boundingBox);\n    });\n  }, [pageData.lines]);\n\n  var _useState3 = useState(null),\n      highlightedKv = _useState3[0],\n      setHighlightedKv = _useState3[1];\n\n  useEffect(function () {\n    if (highlightedKv) {\n      setTimeout(function () {\n        setHighlightedKv(null);\n      }, 10);\n    }\n  }, [highlightedKv]);\n  var switchPage = useCallback(function (pageNumber) {\n    dispatch(setCurrentPageNumber(pageNumber));\n  }, [dispatch]);\n  var setHighlightedLine = useCallback(function () {}, []);\n  return __jsx(\"div\", {\n    className: css.document\n  }, status === 'pending' && __jsx(Loading, null), status === 'success' && __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: css.tabWrapper\n  }, __jsx(Tabs, {\n    isTrackTab: false,\n    selected: tab,\n    track: track,\n    onSelectTab: selectTab,\n    items: [{\n      id: 'search',\n      title: 'Preview'\n    }, {\n      id: 'text',\n      title: 'Raw Text'\n    }, {\n      id: 'kv',\n      title: \"Key-Value Pairs\"\n    }, {\n      id: 'tables',\n      title: \"Tables\"\n    }, {\n      id: 'entities',\n      title: \"Entities\"\n    }, {\n      id: 'medical_entities',\n      title: \"Medical Entities\"\n    }]\n  }), track === 'redaction' && document.redactions && Object.keys(document.redactions).length ? __jsx(\"div\", {\n    className: css.downloadButtons\n  }, __jsx(Button, {\n    inverted: true,\n    onClick: clearReds\n  }, \"Clear Redaction\"), __jsx(Button, {\n    className: css.downloadRedacted,\n    onClick: downloadRedacted\n  }, \"\\u2B07 Redacted Doc\")) : null, __jsx(\"div\", null, __jsx(Tabs, {\n    isTrackTab: true,\n    selected: trackTab,\n    track: track,\n    onSelectTab: selectTrack,\n    items: [{\n      id: 'searchTrack',\n      title: 'Discovery'\n    }, {\n      id: 'complianceTrack',\n      title: 'Compliance'\n    }, {\n      id: 'workflowTrack',\n      title: 'Workflow Automation'\n    }]\n  }))), __jsx(\"div\", {\n    className: cs(css.searchBarWrapper, tab === 'search' && css.visible)\n  }, __jsx(DocumentSearchBar, {\n    className: css.searchBar,\n    placeholder: \"Search current document\\u2026\"\n  }), track === 'redaction' ? __jsx(Button, {\n    onClick: redactMatches\n  }, \"Redact matches\") : null), __jsx(\"div\", {\n    className: css.content,\n    ref: contentRef\n  }, __jsx(DocumentViewer, {\n    className: cs(css.tabSourceViewer, tab === 'kv' && css.withKv, tab === 'entities' && css.withEv, tab === 'medical_entities' && css.withEv, tab === 'text' && css.withText),\n    document: document,\n    pageCount: pageCount,\n    redactions: (document.redactions || {})[currentPageNumber],\n    marks: tab === 'search' ? wordsMatchingSearch : tab === 'text' ? pageLinesAsMarks : tab === 'kv' ? pagePairsAsMarks : tab === 'entities' ? document.highlights || [] : tab === 'medical_entities' ? document.highlights || [] : [],\n    tables: tab === 'tables' && pageData.tables,\n    highlightedMark: highlightedKv\n  }), __jsx(\"div\", {\n    className: cs(css.sidebar, (tab === 'kv' || tab === 'text' || tab === 'entities' || tab === 'medical_entities' || tab === 'search' || tab === 'text' || tab === 'tables') && css.visible)\n  }, __jsx(KeyValueList, {\n    kvPairs: docData.pairs,\n    pageCount: pageCount,\n    currentPageNumber: currentPageNumber,\n    showRedaction: track === 'redaction',\n    onHighlight: setHighlightedKv,\n    onSwitchPage: switchPage,\n    onRedact: redact,\n    onRedactAll: redactAllValues,\n    onDownload: downloadKV,\n    visible: tab === 'kv'\n  }), __jsx(DocumentPreview, {\n    document: document,\n    pageCount: pageCount,\n    visible: tab === 'search',\n    track: track\n  }), __jsx(RawTextLines, {\n    lines: docData.lines,\n    pageCount: pageCount,\n    currentPageNumber: currentPageNumber,\n    onHighlight: setHighlightedLine,\n    onSwitchPage: switchPage,\n    visible: tab === 'text'\n  }), __jsx(EntitiesCheckbox, {\n    entities: docData.entities,\n    pageCount: pageCount,\n    currentPageNumber: currentPageNumber,\n    showRedaction: track === 'redaction',\n    onHighlight: highlightEntities,\n    onSwitchPage: switchPage,\n    onRedact: redactEntityMatches,\n    onRedactAll: redactAllValues,\n    onDownload: downloadKV,\n    visible: tab === 'entities',\n    comprehendService: COMPREHEND_SERVICE,\n    onDownloadPrimary: downloadEntities,\n    onDownloadSecondary: null,\n    document: document\n  }), __jsx(EntitiesCheckbox, {\n    entities: docData.medicalEntities,\n    pageCount: pageCount,\n    currentPageNumber: currentPageNumber,\n    showRedaction: track === 'redaction',\n    onHighlight: highlightEntities,\n    onSwitchPage: switchPage,\n    onRedact: redactEntityMatches,\n    onRedactAll: redactAllValues,\n    onDownloadPrimary: downloadMedicalEntities,\n    onDownloadSecondary: downloadMedicalICD10Ontologies,\n    visible: tab === 'medical_entities',\n    comprehendService: COMPREHEND_MEDICAL_SERVICE,\n    document: document\n  }), __jsx(TableResults, {\n    tables: docData.tables,\n    pageCount: pageCount,\n    currentPageNumber: currentPageNumber,\n    onSwitchPage: switchPage,\n    visible: tab === 'tables',\n    document: document\n  })))));\n}\n\nexport default connect(function mapStateToProps(state) {\n  var _queryString$parse = queryString.parse(location.search),\n      id = _queryString$parse.id;\n\n  return {\n    id: id,\n    currentPageNumber: getCurrentPageNumber(state, id),\n    document: getDocumentById(state, id),\n    searchQuery: getDocumentSearchQuery(state),\n    track: getSelectedTrackId(state)\n  };\n})(Document);\n/**\n * Conditionally fetch documents from the client side.\n *\n * @param {Function} dispatch Redux dispatch function\n * @param {Array} documents An array of documents\n * @param {Boolean} isDocumentFetched True if the document has already been fetched\n */\n\nfunction useFetchDocument(dispatch, id, isDocumentFetched) {\n  var isMounted = useRef(true);\n\n  var _useState4 = useState(''),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  useEffect(function () {\n    if (!isDocumentFetched) {\n      isMounted.current && setStatus('pending');\n      dispatch(fetchDocument(id)).then(function (meta) {\n        isMounted.current && setStatus('success');\n      }).catch(function () {\n        isMounted.current && setStatus('error');\n      });\n    } else {\n      isMounted.current && setStatus('success');\n    }\n  }, [dispatch, id, isDocumentFetched]); // Ensure we don't try to set state after component unmount\n\n  useEffect(function () {\n    return function () {\n      return isMounted.current = false;\n    };\n  }, []);\n  return {\n    status: status\n  };\n}","map":null,"metadata":{},"sourceType":"module"}