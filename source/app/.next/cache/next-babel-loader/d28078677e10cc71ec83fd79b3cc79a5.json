{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport Link from 'next/link';\nimport Highlight from '../../components/Highlight/Highlight';\nimport Loading from '../../components/Loading/Loading';\nimport { MIN_SEARCH_QUERY_LENGTH } from '../../constants/configs';\nimport { makeDocumentLink } from '../../utils/link-generators';\nimport css from './SearchResults.scss';\nSearchResults.defaultProps = {\n  results: []\n};\nexport default function SearchResults(_ref) {\n  let {\n    className,\n    results,\n    searchQuery,\n    searchStatus,\n    searchTotalDocuments,\n    searchTotalMatches,\n    isComparing\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"results\", \"searchQuery\", \"searchStatus\", \"searchTotalDocuments\", \"searchTotalMatches\", \"isComparing\"]);\n\n  const searchResultsClassNames = classNames(css.searchResults, className);\n  const isQueryLongEnough = searchQuery && searchQuery.length >= MIN_SEARCH_QUERY_LENGTH;\n  if (!searchStatus || !searchQuery) return null;\n  const highlightRegex = useMemo(() => {\n    const words = searchQuery.split(/\\W+/).filter(Boolean).map(x => `\\\\b${x}\\\\b`);\n    return new RegExp('(?:' + words.join('|') + ')', 'i');\n  }, [searchQuery]);\n  return __jsx(\"nav\", _extends({\n    className: searchResultsClassNames\n  }, rest), __jsx(\"header\", {\n    className: classNames(isComparing && css.comparing)\n  }, __jsx(\"h2\", null, \"Amazon Elasticsearch Service\", !isComparing ? ' Results' : ''), isComparing ? __jsx(\"p\", null, \"Keyword search results\") : null), !isQueryLongEnough && __jsx(\"p\", {\n    className: css.noContent\n  }, \"Enter a search query longer than \", MIN_SEARCH_QUERY_LENGTH - 1, \" characters to initiate a search.\"), !searchTotalDocuments && searchStatus !== 'pending' && __jsx(\"p\", {\n    className: css.noContent\n  }, \"No results found.\"), !!searchTotalDocuments && searchStatus !== 'pending' && __jsx(\"div\", {\n    className: css.searchSummary\n  }, `Found about ${searchTotalMatches} ${searchTotalMatches === 1 ? 'result' : 'results'} across ${searchTotalDocuments} ${searchTotalDocuments === 1 ? 'document' : 'documents'}`), searchStatus === 'success' && isQueryLongEnough && __jsx(\"ul\", null, results.map(({\n    documentId: id,\n    count,\n    name,\n    lines\n  }) => {\n    if (!count) return null;\n    return __jsx(\"li\", {\n      className: css.resultItem,\n      key: id\n    }, __jsx(Link, makeDocumentLink(id), __jsx(\"a\", null, __jsx(\"header\", null, __jsx(\"h3\", null, __jsx(Highlight, {\n      search: highlightRegex\n    }, name))), __jsx(\"ul\", {\n      className: css.lines\n    }, lines.slice(0, 4).map((line, i) => __jsx(\"li\", {\n      key: i\n    }, \"\\u2026\", __jsx(Highlight, {\n      search: highlightRegex\n    }, line), \"\\u2026\"))))));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}