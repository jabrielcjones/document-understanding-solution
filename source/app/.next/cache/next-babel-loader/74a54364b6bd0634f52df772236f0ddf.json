{"ast":null,"code":"import _extends from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { Fragment, useCallback, useState, useEffect, useRef, forwardRef } from 'react';\nimport classNames from 'classnames';\nimport { Document, Page, pdfjs } from 'react-pdf';\npdfjs.GlobalWorkerOptions.workerSrc = \"/static/pdf.worker.min.js\";\nimport Loading from '../Loading/Loading';\nimport Pager from '../Pager/Pager';\nimport TableDownloader from '../TableDownloader/TableDownloader';\nimport cs from 'classnames';\nimport css from './DocumentViewer.scss';\nDocumentViewer.defaultProps = {};\nexport default function DocumentViewer(_ref) {\n  var className = _ref.className,\n      document = _ref.document,\n      marks = _ref.marks,\n      redactions = _ref.redactions,\n      tables = _ref.tables,\n      pageCount = _ref.pageCount,\n      highlightedMark = _ref.highlightedMark,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"document\", \"marks\", \"redactions\", \"tables\", \"pageCount\", \"highlightedMark\"]);\n\n  var documentName = document.documentName,\n      searchablePdfURL = document.searchablePdfURL,\n      documentURL = document.documentURL;\n  var isPDF = true; // /.pdf$/.test(documentName)\n\n  var viewerClassNames = classNames(css.viewer, className, isPDF && css.pdfViewer);\n\n  var _useDocumentResizer = useDocumentResizer(isPDF, [marks, tables]),\n      containerRef = _useDocumentResizer.containerRef,\n      documentWidth = _useDocumentResizer.documentWidth,\n      handleResize = _useDocumentResizer.handleResize;\n\n  var onLoadSuccess = useCallback(handleResize, []);\n\n  var pager = __jsx(Pager, {\n    className: css.pager,\n    pageTotal: pageCount\n  }, function (currentPageNumber) {\n    return isPDF ? __jsx(DocumentMarks, {\n      marks: marks,\n      highlightedMark: highlightedMark,\n      tables: tables,\n      redactions: redactions,\n      ref: containerRef\n    }, __jsx(Page, {\n      className: css.page,\n      loading: __jsx(Loading, null),\n      pageNumber: currentPageNumber,\n      width: documentWidth,\n      renderAnnotationLayer: false\n    })) : __jsx(\"div\", {\n      className: css.imageWrapper\n    }, __jsx(DocumentMarks, {\n      marks: marks,\n      highlightedMark: highlightedMark,\n      tables: tables,\n      redactions: redactions\n    }, __jsx(\"img\", {\n      className: css.image,\n      src: documentURL\n    })));\n  });\n\n  return __jsx(\"div\", _extends({\n    className: viewerClassNames\n  }, rest), documentURL && isPDF && __jsx(Document, {\n    className: css.document,\n    file: searchablePdfURL,\n    loading: __jsx(Loading, null),\n    onLoadSuccess: onLoadSuccess\n  }, pager), documentURL && !isPDF && pager, !documentURL && __jsx(Loading, null));\n} // Resize PDF on window resize\n\nfunction useDocumentResizer(isPDF, resizeDeps) {\n  var containerRef = useRef(null);\n\n  var _useState = useState(0),\n      documentWidth = _useState[0],\n      setDocumentWidth = _useState[1];\n\n  var handleResize = useCallback(function () {\n    var sz = containerRef && containerRef.current && containerRef.current.offsetWidth;\n    if (sz !== documentWidth) setDocumentWidth(sz);\n  }, [documentWidth]); // eslint-disable-next-line consistent-return\n\n  useEffect(function () {\n    if (isPDF) {\n      window.addEventListener('resize', handleResize, {\n        passive: true\n      });\n      return function () {\n        return window.removeEventListener('resize', handleResize);\n      };\n    }\n  }, [handleResize, isPDF]);\n  useEffect(function () {\n    handleResize();\n    setTimeout(function () {\n      handleResize();\n    }, 500);\n  }, resizeDeps); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    containerRef: containerRef,\n    documentWidth: documentWidth,\n    handleResize: handleResize\n  };\n}\n\nvar DocumentMarks = /*#__PURE__*/forwardRef(function DocumentMarks(_ref2, ref) {\n  var children = _ref2.children,\n      marks = _ref2.marks,\n      tables = _ref2.tables,\n      redactions = _ref2.redactions,\n      highlightedMark = _ref2.highlightedMark;\n  return __jsx(\"div\", {\n    className: css.canvasWrapper\n  }, __jsx(\"div\", {\n    className: css.canvas,\n    ref: ref\n  }, children, marks && marks.map(function (_ref3, i) {\n    var Top = _ref3.Top,\n        Left = _ref3.Left,\n        Width = _ref3.Width,\n        Height = _ref3.Height,\n        type = _ref3.type,\n        id = _ref3.id;\n    return __jsx(\"mark\", {\n      key: \"\".concat(id || '').concat(type || '') || i,\n      className: cs(css.highlight, type, id === highlightedMark && css.highlighted),\n      style: {\n        top: \"\".concat(Top * 100, \"%\"),\n        left: \"\".concat(Left * 100, \"%\"),\n        width: \"\".concat(Width * 100, \"%\"),\n        height: \"\".concat(Height * 100, \"%\")\n      }\n    });\n  }), redactions && Object.values(redactions).map(function (_ref4, i) {\n    var Top = _ref4.Top,\n        Left = _ref4.Left,\n        Width = _ref4.Width,\n        Height = _ref4.Height;\n    return __jsx(\"mark\", {\n      key: i,\n      className: css.redact,\n      style: {\n        top: \"\".concat(Top * 100, \"%\"),\n        left: \"\".concat(Left * 100, \"%\"),\n        width: \"\".concat(Width * 100, \"%\"),\n        height: \"\".concat(Height * 100, \"%\")\n      }\n    });\n  }), tables && tables.map(function (_ref5, i) {\n    var table = _ref5.table,\n        rows = _ref5.rows;\n    return __jsx(TableHighlight, {\n      key: i,\n      table: table,\n      rows: rows\n    });\n  })));\n});\nDocumentMarks.displayName = 'DocumentMarks';\n\nfunction TableHighlight(_ref6) {\n  var table = _ref6.table,\n      rows = _ref6.rows;\n  var _table$Geometry$Bound = table.Geometry.BoundingBox,\n      Top = _table$Geometry$Bound.Top,\n      Left = _table$Geometry$Bound.Left,\n      Width = _table$Geometry$Bound.Width,\n      Height = _table$Geometry$Bound.Height;\n  return __jsx(React.Fragment, null, __jsx(\"mark\", {\n    className: css.highlight,\n    style: {\n      top: \"\".concat(Top * 100, \"%\"),\n      left: \"\".concat(Left * 100, \"%\"),\n      width: \"\".concat(Width * 100, \"%\"),\n      height: \"\".concat(Height * 100, \"%\")\n    }\n  }), __jsx(TableDownloader, {\n    table: table,\n    rows: rows\n  }), rows.map(function (r, i) {\n    return __jsx(Fragment, {\n      key: i\n    }, r.map(function (cell, i) {\n      var _cell$Geometry$Boundi = cell.Geometry.BoundingBox,\n          Top = _cell$Geometry$Boundi.Top,\n          Left = _cell$Geometry$Boundi.Left,\n          Width = _cell$Geometry$Boundi.Width,\n          Height = _cell$Geometry$Boundi.Height;\n      return __jsx(\"mark\", {\n        className: css.cellHighlight,\n        style: {\n          top: \"\".concat(Top * 100, \"%\"),\n          left: \"\".concat(Left * 100, \"%\"),\n          width: \"\".concat(Width * 100, \"%\"),\n          height: \"\".concat(Height * 100, \"%\")\n        }\n      });\n    }));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}