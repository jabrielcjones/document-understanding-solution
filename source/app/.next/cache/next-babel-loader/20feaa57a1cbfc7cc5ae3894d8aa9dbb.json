{"ast":null,"code":"import _defineProperty from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jabrielcjones/dev/belle_fleur/document-understanding-solution/source/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { useState, useCallback } from \"react\";\nimport Router from \"next/router\";\nimport { Auth } from \"aws-amplify\";\nimport Button from \"../components/Button/Button\";\nimport FormInput from \"../components/FormInput/FormInput\";\nimport Loading from \"../components/Loading/Loading\";\nimport css from \"./login.scss\";\n\nLogin.getInitialProps = function () {\n  return {\n    pageTitle: \"Document Understanding Solution\"\n  };\n};\n\nexport default function Login() {\n  var _useState = useState({\n    username: \"\",\n    password: \"\",\n    passwordChangeRequired: false,\n    newPassword: \"\",\n    userInit: undefined\n  }),\n      credentials = _useState[0],\n      setCredentials = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      isLoading = _useState3[0],\n      setIsLoading = _useState3[1];\n\n  var username = credentials.username,\n      password = credentials.password,\n      passwordChangeRequired = credentials.passwordChangeRequired,\n      newPassword = credentials.newPassword,\n      userInit = credentials.userInit;\n  var userInputForm;\n  var handleLoginSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _userInit, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setIsLoading(true);\n              _context.prev = 2;\n              _context.next = 5;\n              return Auth.signIn(username, password);\n\n            case 5:\n              _userInit = _context.sent;\n\n              if (_userInit && _userInit.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n                setCredentials({\n                  passwordChangeRequired: true,\n                  userInit: _userInit\n                });\n                setIsLoading(false);\n              } else {\n                _userInit.signInUserSession && Router.push(\"/home\");\n              }\n\n              _context.next = 14;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              message = _context.t0.message;\n              setError(message);\n              setIsLoading(false);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 9]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [username, password, passwordChangeRequired, userInit]);\n  var handlePasswordResetSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var user, message;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault();\n              setIsLoading(true);\n              _context2.prev = 2;\n              _context2.next = 5;\n              return Auth.completeNewPassword(userInit, newPassword);\n\n            case 5:\n              user = _context2.sent;\n              user.signInUserSession && Router.push(\"/home\");\n              _context2.next = 14;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](2);\n              message = _context2.t0.message;\n              setError(message);\n              setIsLoading(false);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 9]]);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [userInit, newPassword]);\n  var handleFormChange = useCallback(function (e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n    setCredentials(function (credentials) {\n      return _objectSpread(_objectSpread({}, credentials), {}, _defineProperty({}, name, value));\n    });\n  }, [username, password, passwordChangeRequired, newPassword, userInit]);\n\n  var loginForm = function loginForm() {\n    return __jsx(\"form\", {\n      onSubmit: handleLoginSubmit\n    }, __jsx(\"p\", null, __jsx(FormInput, {\n      autoComplete: \"username\",\n      type: \"text\",\n      name: \"username\",\n      label: \"Username\",\n      value: username,\n      onChange: handleFormChange\n    })), __jsx(\"p\", null, __jsx(FormInput, {\n      autoComplete: \"current-password\",\n      type: \"password\",\n      name: \"password\",\n      label: \"Password\",\n      value: password,\n      onChange: handleFormChange\n    })), __jsx(Button, {\n      disabled: isLoading\n    }, \"Login\"), error && __jsx(\"p\", {\n      className: css.error\n    }, error));\n  };\n\n  var passwordResetForm = function passwordResetForm() {\n    return __jsx(\"form\", {\n      onSubmit: handlePasswordResetSubmit\n    }, __jsx(\"p\", null, __jsx(FormInput, {\n      autoComplete: \"new-password\",\n      type: \"password\",\n      name: \"newPassword\",\n      label: \"New Password\",\n      value: newPassword,\n      onChange: handleFormChange\n    })), __jsx(Button, {\n      disabled: isLoading\n    }, \"Login\"), error && __jsx(\"p\", {\n      className: css.error\n    }, error));\n  };\n\n  userInputForm = passwordChangeRequired ? passwordResetForm() : loginForm();\n  return __jsx(\"article\", null, __jsx(\"div\", {\n    className: css.form\n  }, __jsx(\"h2\", null, \"Login\"), userInputForm, isLoading && __jsx(Loading, null)));\n}","map":null,"metadata":{},"sourceType":"module"}