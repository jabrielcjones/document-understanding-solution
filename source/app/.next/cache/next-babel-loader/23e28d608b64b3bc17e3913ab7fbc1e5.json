{"ast":null,"code":"var __jsx = React.createElement;\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { Fragment, useEffect, useState, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { connect, useDispatch } from 'react-redux';\nimport { useInView } from 'react-intersection-observer';\nimport { distanceInWordsToNow, distanceInWords } from 'date-fns';\nimport Router from \"next/router\";\nimport { reject, isNil } from 'ramda';\nimport { clearSearchQuery, setSearchQuery, setSearchStatus } from '../../store/entities/meta/actions';\nimport { search, clearSearchResults } from '../../store/entities/searchResults/actions';\nimport { MIN_SEARCH_QUERY_LENGTH, ENABLE_KENDRA } from '../../constants/configs';\nimport DocumentList from '../../components/DocumentList/DocumentList';\nimport Loading from '../../components/Loading/Loading';\nimport Button from '../../components/Button/Button';\nimport SearchResults from '../../components/SearchResults/SearchResults';\nimport KendraResults from '../../components/KendraResults/KendraResults';\nimport SearchTypeTabs from '../../components/SearchTypeTabs/SearchTypeTabs';\nimport { fetchDocuments } from '../../store/entities/documents/actions';\nimport { setDocumentsNextToken } from '../../store/entities/meta/actions';\nimport { getDocumentsNextToken, getDocumentsTotal, getCleanSearchQuery, getSearchStatus, getSearchTotalDocuments, getSearchTotalMatches, getSearchPersona, getKendraQueryId, getKendraFilteredQueryId, getKendraResultCount, getKendraFilteredResultCount } from '../../store/entities/meta/selectors';\nimport { getDocuments } from '../../store/entities/documents/selectors';\nimport { getSearchResults, getKendraResults, getKendraFilteredResults } from '../../store/entities/searchResults/selectors';\nimport { getSelectedTrackId, getSelectedSearch } from '../../store/ui/selectors';\nimport { makeDocumentLink } from '../../utils/link-generators';\nimport css from './documents.scss';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport { setHeaderProps } from '../../store/ui/actions';\nimport Link from 'next/link';\nimport TooltipButton from '../../components/TooltipButton/TooltipButton';\nDocuments.defaultProps = {\n  documents: []\n};\n\nfunction Documents({\n  documents,\n  documentsNextToken,\n  documentsTotal,\n  dispatch,\n  searchQuery,\n  searchPersona,\n  searchResults,\n  kendraResults,\n  kendraFilteredResults,\n  searchStatus,\n  searchTotalDocuments,\n  searchTotalMatches,\n  kendraQueryId,\n  kendraFilteredQueryId,\n  kendraResultCount,\n  kendraFilteredResultCount,\n  track,\n  selectedSearch\n}) {\n  const [sentinelRef, isSentinelVisible] = useInView({\n    threshold: 1\n  });\n  const {\n    status\n  } = useFetchDocuments({\n    dispatch,\n    nextToken: documentsNextToken,\n    isSentinelVisible\n  });\n  const doSearch = useSearchCallback(dispatch, searchPersona);\n  useEffect(() => {\n    dispatch(setSearchQuery(''));\n  }, []);\n  useEffect(() => {\n    doSearch(searchQuery);\n  }, [searchQuery, doSearch]);\n  let files = documents.map(({\n    documentId,\n    documentName,\n    documentStatus,\n    documentCreatedOn,\n    documentCompletedOn\n  }) => {\n    const uploadedTime = distanceInWordsToNow(`${documentCreatedOn}Z`, {\n      addSuffix: true\n    });\n    const processedTime = documentCompletedOn && distanceInWords(`${documentCreatedOn}Z`, `${documentCompletedOn}Z`);\n    return {\n      id: documentId,\n      title: documentName,\n      link: makeDocumentLink(documentId),\n      documentStatus: documentStatus,\n      uploadedTime,\n      processedTime\n    };\n  });\n  const listDetailsClassNames = classNames(css.listDetails);\n  const introClassNames = classNames(css.intro);\n  useEffect(() => {\n    dispatch(setHeaderProps({\n      showNavigation: !!searchQuery\n    }));\n  }, [searchQuery]);\n\n  if (documentsTotal === 0 && status === 'success') {\n    return __jsx(\"div\", {\n      className: css.documents\n    }, __jsx(\"p\", {\n      className: \"noContent\"\n    }, \"No documents found. \", __jsx(\"br\", null), __jsx(Button, {\n      link: {\n        href: '/select'\n      }\n    }, \"+ Add a new Document\")));\n  }\n\n  const isQueryLongEnough = searchQuery && searchQuery.length >= MIN_SEARCH_QUERY_LENGTH;\n  return __jsx(\"div\", {\n    className: css.documents\n  }, __jsx(\"div\", {\n    className: introClassNames\n  }, !searchQuery && __jsx(\"h3\", null, \"Search through documents to find the information you are looking for\"), __jsx(SearchBar, {\n    className: css.searchBar,\n    light: true,\n    suggestions: ENABLE_KENDRA && ['What is diabetes?', 'What are the types of diabetes?', 'How many people have diabetes?', 'How to manage kidney disease', 'Does high blood pressure cause kidney disease?', 'How to prevent kidney disease']\n  })), status === 'pending' && !files.length && __jsx(Loading, null), (status === 'success' || !!files.length) && !searchQuery && __jsx(Fragment, null, __jsx(\"div\", {\n    className: listDetailsClassNames\n  }, __jsx(\"h3\", null, \"Document list\"), __jsx(\"p\", {\n    className: css.instructions\n  }, !!files.length && __jsx(\"span\", {\n    className: css.fileCount\n  }, \"Showing \", files.length, \" of \", documentsTotal, \" document\", documentsTotal !== 1 && 's'), \"Analyze a document from the list of documents below, or \", __jsx(Link, {\n    href: \"/select\"\n  }, __jsx(\"a\", null, \"upload your own documents\")), \".\")), __jsx(DocumentList, {\n    items: files,\n    className: css.list\n  }), status === 'pending' && !!files.length && __jsx(Loading, {\n    size: 64,\n    overlay: false,\n    className: css.loadingItems\n  }), status === 'success' && documentsNextToken && __jsx(\"div\", {\n    ref: sentinelRef,\n    className: css.sentinel\n  })), status === 'error' && __jsx(\"p\", {\n    className: \"noContent\"\n  }, \"Something went wrong, please refresh the page to try again.\"), searchQuery && __jsx(React.Fragment, null, __jsx(\"div\", null, ENABLE_KENDRA ? __jsx(SearchTypeTabs, null) : null, __jsx(\"div\", {\n    className: css.searchResultContainer\n  }, !ENABLE_KENDRA || selectedSearch === 'es' || selectedSearch === 'both' ? __jsx(SearchResults, {\n    results: searchResults,\n    searchStatus: searchStatus,\n    searchQuery: searchQuery,\n    searchTotalDocuments: searchTotalDocuments,\n    searchTotalMatches: searchTotalMatches,\n    isComparing: selectedSearch === 'both'\n  }) : null, selectedSearch === 'both' && __jsx(TooltipButton, {\n    tooltip: __jsx(React.Fragment, null, __jsx(\"p\", null, \"In a traditional keyword search, the results are provided in a list. The user needs to go through the list, select a document that may have the answer, and then go find the answer within the document.\"), __jsx(\"p\", null, \"Amazon Kendra is automating all of that to parse the results. It shortens the cycle of opening the link and directly extracts suggested answers, as well as frequently asked questions related to the search query.\"))\n  }, __jsx(\"div\", {\n    className: css.compareButton\n  }, __jsx(\"img\", {\n    src: \"/static/images/icon_tip.svg\"\n  }), \"What's the difference?\")), ENABLE_KENDRA && (selectedSearch === 'kendra' || selectedSearch === 'both') ? __jsx(KendraResults, {\n    results: kendraResults,\n    filteredResults: kendraFilteredResults,\n    searchStatus: searchStatus,\n    searchQuery: searchQuery,\n    kendraQueryId: kendraQueryId,\n    filteredQueryId: kendraFilteredQueryId,\n    resultCount: kendraResultCount,\n    filteredResultCount: kendraFilteredResultCount,\n    searchPersona: searchPersona,\n    showPersonaSelector: selectedSearch === 'kendra',\n    isComparing: selectedSearch === 'both'\n  }) : null, searchStatus === 'pending' && isQueryLongEnough && __jsx(Loading, null)))));\n}\n\nexport default connect(function mapStateToProps(state) {\n  return {\n    documents: getDocuments(state),\n    documentsNextToken: getDocumentsNextToken(state),\n    documentsTotal: getDocumentsTotal(state),\n    searchQuery: getCleanSearchQuery(state),\n    searchStatus: getSearchStatus(state),\n    searchPersona: getSearchPersona(state),\n    searchResults: getSearchResults(state),\n    kendraResults: getKendraResults(state),\n    kendraFilteredResults: getKendraFilteredResults(state),\n    searchTotalDocuments: getSearchTotalDocuments(state),\n    searchTotalMatches: getSearchTotalMatches(state),\n    kendraQueryId: getKendraQueryId(state),\n    kendraFilteredQueryId: getKendraFilteredQueryId(state),\n    kendraResultCount: getKendraResultCount(state),\n    kendraFilteredResultCount: getKendraFilteredResultCount(state),\n    track: getSelectedTrackId(state),\n    selectedSearch: getSelectedSearch(state)\n  };\n})(Documents);\n/**\n * Conditionally fetch documents.\n *\n * @param {Function} dispatch Redux dispatch function\n * @param {String} nextToken Indicates that there are more documents available to fetch\n * @param {Boolean} isSentinelVisible Is the window scrolled to the end of the list and the are more docs to fetch\n * @return {Object} Returns an object with the current fetch status\n */\n\nfunction useFetchDocuments({\n  dispatch,\n  nextToken,\n  isSentinelVisible\n}) {\n  const isMounted = useRef(true);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('');\n  useEffect(() => {\n    if (!status) dispatch(setDocumentsNextToken(null));\n    const isFirstFetch = !!(!nextToken && !status);\n    const isReadyToFetchMore = !!(nextToken && isSentinelVisible && status === 'success');\n\n    if (isReadyToFetchMore || isFirstFetch) {\n      setStatus('pending'); // Immediately clear the nextToken until we hear back from the fetch.\n      // The response may or may not include a new nextToken.\n\n      nextToken && dispatch(setDocumentsNextToken(null)); // Fetch documents\n\n      dispatch(fetchDocuments({\n        nextToken\n      })).then(() => {\n        isMounted.current && setStatus('success');\n      }).catch(() => {\n        isMounted.current && setStatus('error');\n      });\n    }\n  }, [dispatch, nextToken, isSentinelVisible, status]); // Ensure we don't try to set state after component unmount\n\n  useEffect(() => () => isMounted.current = false, []);\n  return {\n    status\n  };\n}\n/**\n * Create a throttled search handler.\n * Search query must be greater than or equal to MIN_SEARCH_QUERY_LENGTH.\n *\n * @param {Function} dispatch Redux dispatch function\n * @return {Function} Returns a search handler\n */\n\n\nfunction useSearchCallback(dispatch, persona) {\n  const isMounted = useRef(true); // Ensure we don't try to set state after component unmount\n\n  useEffect(() => () => isMounted.current = false, []);\n  const handleSearchChange = useCallback(k => {\n    if (k && k.length >= MIN_SEARCH_QUERY_LENGTH) {\n      dispatch(setSearchStatus('pending'));\n      const params = reject(isNil, {\n        k,\n        persona\n      }); // Clear out old search results\n\n      dispatch(clearSearchResults()); // Search documents\n\n      dispatch(search(params)).then(() => {\n        isMounted.current && dispatch(setSearchStatus('success'));\n      }).catch(err => {\n        console.log(err);\n        isMounted.current && dispatch(setSearchStatus('error'));\n      });\n    }\n  }, [dispatch, persona]);\n  return handleSearchChange;\n}","map":null,"metadata":{},"sourceType":"module"}