{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { useState, useCallback } from \"react\";\nimport Router from \"next/router\";\nimport { Auth } from \"aws-amplify\";\nimport Button from \"../components/Button/Button\";\nimport FormInput from \"../components/FormInput/FormInput\";\nimport Loading from \"../components/Loading/Loading\";\nimport css from \"./login.scss\";\n\nLogin.getInitialProps = function () {\n  return {\n    pageTitle: \"Document Understanding Solution\"\n  };\n};\n\nexport default function Login() {\n  const {\n    0: credentials,\n    1: setCredentials\n  } = useState({\n    username: \"\",\n    password: \"\",\n    passwordChangeRequired: false,\n    newPassword: \"\",\n    userInit: undefined\n  });\n  const {\n    0: error,\n    1: setError\n  } = useState(\"\");\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    username,\n    password,\n    passwordChangeRequired,\n    newPassword,\n    userInit\n  } = credentials;\n  let userInputForm;\n  const handleLoginSubmit = useCallback(async e => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const userInit = await Auth.signIn(username, password);\n\n      if (userInit && userInit.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n        setCredentials({\n          passwordChangeRequired: true,\n          userInit: userInit\n        });\n        setIsLoading(false);\n      } else {\n        userInit.signInUserSession && Router.push(\"/home\");\n      }\n    } catch ({\n      message\n    }) {\n      setError(message);\n      setIsLoading(false);\n    }\n  }, [username, password, passwordChangeRequired, userInit]);\n  const handlePasswordResetSubmit = useCallback(async e => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const user = await Auth.completeNewPassword(userInit, newPassword);\n      user.signInUserSession && Router.push(\"/home\");\n    } catch ({\n      message\n    }) {\n      setError(message);\n      setIsLoading(false);\n    }\n  }, [userInit, newPassword]);\n  const handleFormChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCredentials(credentials => _objectSpread(_objectSpread({}, credentials), {}, {\n      [name]: value\n    }));\n  }, [username, password, passwordChangeRequired, newPassword, userInit]);\n\n  const loginForm = () => {\n    return __jsx(\"form\", {\n      onSubmit: handleLoginSubmit\n    }, __jsx(\"p\", null, __jsx(FormInput, {\n      autoComplete: \"username\",\n      type: \"text\",\n      name: \"username\",\n      label: \"Username\",\n      value: username,\n      onChange: handleFormChange\n    })), __jsx(\"p\", null, __jsx(FormInput, {\n      autoComplete: \"current-password\",\n      type: \"password\",\n      name: \"password\",\n      label: \"Password\",\n      value: password,\n      onChange: handleFormChange\n    })), __jsx(Button, {\n      disabled: isLoading\n    }, \"Login\"), error && __jsx(\"p\", {\n      className: css.error\n    }, error));\n  };\n\n  const passwordResetForm = () => {\n    return __jsx(\"form\", {\n      onSubmit: handlePasswordResetSubmit\n    }, __jsx(\"p\", null, __jsx(FormInput, {\n      autoComplete: \"new-password\",\n      type: \"password\",\n      name: \"newPassword\",\n      label: \"New Password\",\n      value: newPassword,\n      onChange: handleFormChange\n    })), __jsx(Button, {\n      disabled: isLoading\n    }, \"Login\"), error && __jsx(\"p\", {\n      className: css.error\n    }, error));\n  };\n\n  userInputForm = passwordChangeRequired ? passwordResetForm() : loginForm();\n  return __jsx(\"article\", null, __jsx(\"div\", {\n    className: css.form\n  }, __jsx(\"h2\", null, \"Login\"), userInputForm, isLoading && __jsx(Loading, null)));\n}","map":null,"metadata":{},"sourceType":"module"}