{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/**********************************************************************************************************************\n *  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.                                           *\n *                                                                                                                    *\n *  Licensed under the Apache License, Version 2.0 (the License). You may not use this file except in compliance    *\n *  with the License. A copy of the License is located at                                                             *\n *                                                                                                                    *\n *      http://www.apache.org/licenses/LICENSE-2.0                                                                    *\n *                                                                                                                    *\n *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES *\n *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions    *\n *  and limitations under the License.                                                                                *\n *********************************************************************************************************************/\nimport React, { Fragment, useCallback, useState, useEffect, useRef, forwardRef } from 'react';\nimport classNames from 'classnames';\nimport { Document, Page, pdfjs } from 'react-pdf';\npdfjs.GlobalWorkerOptions.workerSrc = `/static/pdf.worker.min.js`;\nimport Loading from '../Loading/Loading';\nimport Pager from '../Pager/Pager';\nimport TableDownloader from '../TableDownloader/TableDownloader';\nimport cs from 'classnames';\nimport css from './DocumentViewer.scss';\nDocumentViewer.defaultProps = {};\nexport default function DocumentViewer(_ref) {\n  let {\n    className,\n    document,\n    marks,\n    redactions,\n    tables,\n    pageCount,\n    highlightedMark\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"document\", \"marks\", \"redactions\", \"tables\", \"pageCount\", \"highlightedMark\"]);\n\n  const {\n    documentName,\n    searchablePdfURL,\n    documentURL\n  } = document;\n  const isPDF = true; // /.pdf$/.test(documentName)\n\n  const viewerClassNames = classNames(css.viewer, className, isPDF && css.pdfViewer);\n  const {\n    containerRef,\n    documentWidth,\n    handleResize\n  } = useDocumentResizer(isPDF, [marks, tables]);\n  const onLoadSuccess = useCallback(handleResize, []);\n\n  const pager = __jsx(Pager, {\n    className: css.pager,\n    pageTotal: pageCount\n  }, currentPageNumber => isPDF ? __jsx(DocumentMarks, {\n    marks: marks,\n    highlightedMark: highlightedMark,\n    tables: tables,\n    redactions: redactions,\n    ref: containerRef\n  }, __jsx(Page, {\n    className: css.page,\n    loading: __jsx(Loading, null),\n    pageNumber: currentPageNumber,\n    width: documentWidth,\n    renderAnnotationLayer: false\n  })) : __jsx(\"div\", {\n    className: css.imageWrapper\n  }, __jsx(DocumentMarks, {\n    marks: marks,\n    highlightedMark: highlightedMark,\n    tables: tables,\n    redactions: redactions\n  }, __jsx(\"img\", {\n    className: css.image,\n    src: documentURL\n  }))));\n\n  return __jsx(\"div\", _extends({\n    className: viewerClassNames\n  }, rest), documentURL && isPDF && __jsx(Document, {\n    className: css.document,\n    file: searchablePdfURL,\n    loading: __jsx(Loading, null),\n    onLoadSuccess: onLoadSuccess\n  }, pager), documentURL && !isPDF && pager, !documentURL && __jsx(Loading, null));\n} // Resize PDF on window resize\n\nfunction useDocumentResizer(isPDF, resizeDeps) {\n  const containerRef = useRef(null);\n  const {\n    0: documentWidth,\n    1: setDocumentWidth\n  } = useState(0);\n  const handleResize = useCallback(() => {\n    const sz = containerRef && containerRef.current && containerRef.current.offsetWidth;\n    if (sz !== documentWidth) setDocumentWidth(sz);\n  }, [documentWidth]); // eslint-disable-next-line consistent-return\n\n  useEffect(() => {\n    if (isPDF) {\n      window.addEventListener('resize', handleResize, {\n        passive: true\n      });\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [handleResize, isPDF]);\n  useEffect(() => {\n    handleResize();\n    setTimeout(() => {\n      handleResize();\n    }, 500);\n  }, resizeDeps); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    containerRef,\n    documentWidth,\n    handleResize\n  };\n}\n\nconst DocumentMarks = /*#__PURE__*/forwardRef(function DocumentMarks({\n  children,\n  marks,\n  tables,\n  redactions,\n  highlightedMark\n}, ref) {\n  return __jsx(\"div\", {\n    className: css.canvasWrapper\n  }, __jsx(\"div\", {\n    className: css.canvas,\n    ref: ref\n  }, children, marks && marks.map(({\n    Top,\n    Left,\n    Width,\n    Height,\n    type,\n    id\n  }, i) => __jsx(\"mark\", {\n    key: `${id || ''}${type || ''}` || i,\n    className: cs(css.highlight, type, id === highlightedMark && css.highlighted),\n    style: {\n      top: `${Top * 100}%`,\n      left: `${Left * 100}%`,\n      width: `${Width * 100}%`,\n      height: `${Height * 100}%`\n    }\n  })), redactions && Object.values(redactions).map(({\n    Top,\n    Left,\n    Width,\n    Height\n  }, i) => __jsx(\"mark\", {\n    key: i,\n    className: css.redact,\n    style: {\n      top: `${Top * 100}%`,\n      left: `${Left * 100}%`,\n      width: `${Width * 100}%`,\n      height: `${Height * 100}%`\n    }\n  })), tables && tables.map(({\n    table,\n    rows\n  }, i) => __jsx(TableHighlight, {\n    key: i,\n    table: table,\n    rows: rows\n  }))));\n});\nDocumentMarks.displayName = 'DocumentMarks';\n\nfunction TableHighlight({\n  table,\n  rows\n}) {\n  const {\n    Top,\n    Left,\n    Width,\n    Height\n  } = table.Geometry.BoundingBox;\n  return __jsx(React.Fragment, null, __jsx(\"mark\", {\n    className: css.highlight,\n    style: {\n      top: `${Top * 100}%`,\n      left: `${Left * 100}%`,\n      width: `${Width * 100}%`,\n      height: `${Height * 100}%`\n    }\n  }), __jsx(TableDownloader, {\n    table,\n    rows\n  }), rows.map((r, i) => __jsx(Fragment, {\n    key: i\n  }, r.map((cell, i) => {\n    const {\n      Top,\n      Left,\n      Width,\n      Height\n    } = cell.Geometry.BoundingBox;\n    return __jsx(\"mark\", {\n      className: css.cellHighlight,\n      style: {\n        top: `${Top * 100}%`,\n        left: `${Left * 100}%`,\n        width: `${Width * 100}%`,\n        height: `${Height * 100}%`\n      }\n    });\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}